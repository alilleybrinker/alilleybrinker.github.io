<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Andrew Lilley Brinker — Software Supply Chain Security - Rust</title>
    <subtitle>I work on software supply chain security at MITRE, including serving as amember of the OmniBOR Working Group, where I lead development of the Rustimplementation, and as the project manager for Hipcheck, a tool forautomated supply chain risk assessment of software packages.
</subtitle>
    <link rel="self" type="application/atom+xml" href="https://www.alilleybrinker.com/topics/rust/atom.xml"/>
    <link rel="alternate" type="text/html" href="https://www.alilleybrinker.com"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-02-19T00:00:00+00:00</updated>
    <id>https://www.alilleybrinker.com/topics/rust/atom.xml</id>
    <entry xml:lang="en">
        <title>Renegotiating C</title>
        <published>2024-02-19T00:00:00+00:00</published>
        <updated>2024-02-19T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://www.alilleybrinker.com/blog/renegotiating-c/"/>
        <id>https://www.alilleybrinker.com/blog/renegotiating-c/</id>
        
        <summary type="html">&lt;p&gt;I am tying myself in a knot.&lt;&#x2F;p&gt;
&lt;p&gt;It all started when I read “&lt;a href=&quot;https:&#x2F;&#x2F;nedbatchelder.com&#x2F;blog&#x2F;202401&#x2F;you_probably_dont_need_to_learn_c.html&quot;&gt;You (Probably) Don’t Need to Learn C&lt;&#x2F;a&gt;,” a good article
which raises good points about the poor arguments people tend to make when defending
the choice of learning C in this day and age. First and foremost: “you should learn
C so you know how a computer really works.” The article itself refers then to David
Chisnall’s “&lt;a href=&quot;https:&#x2F;&#x2F;dl.acm.org&#x2F;doi&#x2F;pdf&#x2F;10.1145&#x2F;3212477.3212479&quot;&gt;C is Not a Low-Level Language&lt;&#x2F;a&gt;,” so I’ll do the same because it makes the
case better than I can. C is not the computer. C is (maybe) the only interface to
syscalls exposed by the operating system, depending on the system. C is (definitely)
an important part of computing history and computing today.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>“Implementation Selection” in Rust</title>
        <published>2024-01-23T00:00:00+00:00</published>
        <updated>2024-01-23T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://www.alilleybrinker.com/blog/implementation-selection/"/>
        <id>https://www.alilleybrinker.com/blog/implementation-selection/</id>
        
        <summary type="html">&lt;p&gt;A common problem in programming is when you want the path of options for “what happens
next” to split. In structured programming this would generally come in the form of
a series of &lt;code&gt;if&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;else if&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;else&lt;&#x2F;code&gt; (or whatever the syntax is in your preferred language),
or a &lt;code&gt;switch&lt;&#x2F;code&gt; if your language supports it. Maybe you have a ternary operator for a more
compact &lt;code&gt;if&lt;&#x2F;code&gt;&#x2F;&lt;code&gt;else&lt;&#x2F;code&gt;. &lt;em&gt;Maybe&lt;&#x2F;em&gt; you go whole-hog and have some array of function pointers
to embed the selection into data. Whatever way you slice it, you have paths of control
flow, and you want to choose between them in a structured fashion.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Technostructuralism</title>
        <published>2019-04-03T00:00:00+00:00</published>
        <updated>2019-04-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://www.alilleybrinker.com/blog/technostructuralism/"/>
        <id>https://www.alilleybrinker.com/blog/technostructuralism/</id>
        
        <summary type="html">&lt;p&gt;So Steve Klabnik posted a really thoughtful piece on open source and free software
(&lt;a href=&quot;https:&#x2F;&#x2F;words.steveklabnik.com&#x2F;what-comes-after-open-source&quot;&gt;read it if you haven’t&lt;&#x2F;a&gt;),
and the responses on places like Hacker News made an error that seems common in these
circles: believing working harder will solve a problem.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>Monomorphization Bloat</title>
        <published>2016-12-03T00:00:00+00:00</published>
        <updated>2016-12-03T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://www.alilleybrinker.com/blog/monomorphization-bloat/"/>
        <id>https://www.alilleybrinker.com/blog/monomorphization-bloat/</id>
        
        <summary type="html">&lt;p&gt;In this post I will discuss monomorphization: what it is, why it’s useful, and
what problems can potentially arise from it, with a particular focus on the
problem of monomorphization bloat. I will also look at options for dealing with
monomorphization bloat in your codebase.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
    <entry xml:lang="en">
        <title>String Types in Rust</title>
        <published>2016-03-27T00:00:00+00:00</published>
        <updated>2016-03-27T00:00:00+00:00</updated>
        
        <author>
          <name>
            
              Unknown
            
          </name>
        </author>
        
        <link rel="alternate" type="text/html" href="https://www.alilleybrinker.com/blog/string-types-in-rust/"/>
        <id>https://www.alilleybrinker.com/blog/string-types-in-rust/</id>
        
        <summary type="html">&lt;p&gt;This seems to be a common issue, so let’s talk about the different string types
in the Rust programming language. In this post I’m going to explain the
organization of Rust’s string types with &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;string&#x2F;struct.String.html&quot; title=&quot;Rustdoc for the String type&quot;&gt;&lt;code&gt;String&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; and &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;primitive.str.html&quot; title=&quot;Rustdoc for the str type&quot;&gt;&lt;code&gt;str&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; as
examples, then get into the lesser-used string types—&lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ffi&#x2F;struct.CString.html&quot; title=&quot;Rustdoc for the CString type&quot;&gt;&lt;code&gt;CString&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
&lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ffi&#x2F;struct.CStr.html&quot; title=&quot;Rustdoc for the CStr type&quot;&gt;&lt;code&gt;CStr&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ffi&#x2F;struct.OsString.html&quot; title=&quot;Rustdoc for the OsString type&quot;&gt;&lt;code&gt;OsString&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;ffi&#x2F;struct.OsStr.html&quot; title=&quot;Rustdoc for the OsStr type&quot;&gt;&lt;code&gt;OsStr&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;, &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;path&#x2F;struct.PathBuf.html&quot; title=&quot;Rustdoc for the PathBuf type&quot;&gt;&lt;code&gt;PathBuf&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;,
and &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;path&#x2F;struct.Path.html&quot; title=&quot;Rustdoc for the Path type&quot;&gt;&lt;code&gt;Path&lt;&#x2F;code&gt;&lt;&#x2F;a&gt;—and how the &lt;a href=&quot;http:&#x2F;&#x2F;doc.rust-lang.org&#x2F;std&#x2F;borrow&#x2F;enum.Cow.html&quot; title=&quot;Rustdoc for the Cow type&quot;&gt;&lt;code&gt;Cow&lt;&#x2F;code&gt;&lt;&#x2F;a&gt; container can make working with
Rust strings easier.&lt;&#x2F;p&gt;
</summary>
        
    </entry>
</feed>
